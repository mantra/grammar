/* Comment */
def f() {
    var g = { } // empty lambda; no args, no return value
    var g = {"hi"} // if single expression, no need for return
    var g = { x:int | return x*2 }
    var g = { x | return x*2 }
    var g = (x:int) => x*2
    var g = x => x*2	 // no () needed if no return type or arg type
    var g = (x,y) => x*y // () needed for multiple
    var g = { x:int | return x*2 } // {..} requires statements not expr
    time({ print "hi" })
    time() { x | 2*x }
    h({2.0*x}) // type inf from h def
    h({x:int | 2.0*x})
    h(m,x,b => float(m*x+b))  // arg types must be inferred
    h({m,x,b | return float(m*x+b)})  // arg types must be inferred
    h({x:int,b:float | return float(m*x+b)})  // explicit arg types
}

def h(f : func<(x:int):float>) {
    f(x=34)
    var y = sin(x)
}